
/**
 * This application parses image urls out of arbitrary web pages and 
 * displays the images.
 * @author akhileshnayak
 */
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import org.htmlparser.Parser;
import org.htmlparser.filters.NodeClassFilter;
import org.htmlparser.tags.ImageTag;
import org.htmlparser.util.NodeList;
import org.htmlparser.util.ParserException;


public class ImageScraper extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public ImageScraper() {
        initComponents();
        currentIndex = -1;
        imageUrls = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mainPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        urlTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        regExpTextField = new javax.swing.JTextField();
        submitButton = new javax.swing.JButton();
        imageScrollPane = new javax.swing.JScrollPane();
        imageLabel = new javax.swing.JLabel();
        leftButton = new javax.swing.JButton();
        rightButton = new javax.swing.JButton();
        fileNameLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(600, 480));
        setPreferredSize(new java.awt.Dimension(600, 480));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("URL:");

        jLabel2.setText("REGEXP:");

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        imageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageLabel.setText("0/0");

        leftButton.setText("<");
        leftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftButtonActionPerformed(evt);
            }
        });

        rightButton.setText(">");
        rightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightButtonActionPerformed(evt);
            }
        });

        fileNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        fileNameLabel.setText("File Name");

        org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(imageScrollPane)
            .add(mainPanelLayout.createSequentialGroup()
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(mainPanelLayout.createSequentialGroup()
                                .add(jLabel1)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(urlTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 216, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(mainPanelLayout.createSequentialGroup()
                                .add(jLabel2)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(regExpTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 217, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(18, 18, 18)
                        .add(submitButton))
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(113, 113, 113)
                        .add(leftButton)
                        .add(75, 75, 75)
                        .add(imageLabel)
                        .add(66, 66, 66)
                        .add(rightButton))
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(190, 190, 190)
                        .add(fileNameLabel)))
                .addContainerGap(108, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel1)
                            .add(urlTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel2)
                            .add(regExpTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(23, 23, 23)
                        .add(submitButton)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(fileNameLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(imageScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(leftButton)
                    .add(imageLabel)
                    .add(rightButton)))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 102;
        gridBagConstraints.ipady = 260;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(mainPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        
        //get html string
        String html = "";
        BufferedReader br = null;
        try {
            String urlString = urlTextField.getText();
            URL url;
            InputStream is;
            try {
                url = new URL(urlString);
                is = url.openStream();
            } catch(Exception e) {
            
                String prefix;
                try {
                    prefix = HTTP + WWW;
                    url = new URL(prefix + urlString);
                    is = url.openStream();
                    urlTextField.setText(prefix + urlString);
                } catch(Exception e1) {
                    prefix = HTTP;
                    url = new URL(prefix + urlString);
                    is = url.openStream();
                    urlTextField.setText(prefix + urlString);
                }
            }   
            
            br = new BufferedReader(new InputStreamReader(is));

            String inputLine;
            while ((inputLine = br.readLine()) != null) {
                html += inputLine + "\n";
            }
        } catch (Exception e) {
            fileNameLabel.setText("Invalid URL");
            return;
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (IOException ex) {
                    Logger.getLogger(ImageScraper.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
        //parse html string here
        String regExp = regExpTextField.getText();
        if (regExp.equals("")) {
            fileNameLabel.setText("Enter a Regular Expression");
            return;
        }
        try {
            Pattern.compile(regExp);
        } catch (PatternSyntaxException e) {
            fileNameLabel.setText("Invalid Regular Expression");
            return;
        }
        
        imageUrls = new ArrayList<String>();     
        
        try {
            
            Parser parser = new Parser();
            parser.setInputHTML(html);
            NodeList list = parser.extractAllNodesThatMatch(new NodeClassFilter(ImageTag.class));        

            for (int i = 0; i < list.size(); i++){
                ImageTag extractedTag = (ImageTag)list.elementAt(i);
                String extractedImageSrc = extractedTag.getImageURL();
                if(extractedImageSrc.matches(regExp)) {
                    imageUrls.add(extractedImageSrc);
                }
            }
            
        } catch (ParserException ex) {
            Logger.getLogger(ImageScraper.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if (imageUrls.size() > 0) {
            currentIndex = 0;
            loadImage();
        }
        else {
            fileNameLabel.setText("No Images meeting criteria");
        }
        
    }//GEN-LAST:event_submitButtonActionPerformed

    private void leftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftButtonActionPerformed
        
        if (currentIndex > -1) {
            if (currentIndex == 0) {
                currentIndex = (imageUrls.size()-1);
                loadImage();
            }
            else {
                currentIndex--;
                loadImage();
            }
            
        }
    }//GEN-LAST:event_leftButtonActionPerformed

    private void rightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightButtonActionPerformed
        
        if (currentIndex > -1) {
            currentIndex++;
            if (currentIndex >= imageUrls.size()) {
                currentIndex = 0;
            }
            loadImage();
        }
    }//GEN-LAST:event_rightButtonActionPerformed

    private void loadImage() {
        
        imageLabel.setText((currentIndex+1) + "/" + imageUrls.size());
        
        String imageUrl = imageUrls.get(currentIndex);
        String fileName = imageUrl.substring(imageUrl.lastIndexOf('/')+1, imageUrl.length());
        //here fileName has the entire url after the last '/' (forward slash)
        int limit = 30;
        if (fileName.length() > limit) {
            fileName = fileName.substring(0,limit) + "...";
        }
        
        BufferedImage image = null;
        if (!invalidImageUrls.contains(imageUrl)) {
            URL url;
            InputStream is;
            try {
                image = cache.get(imageUrl);
                if (image == null) {
                    try {
                        url = new URL(imageUrl);
                        is = url.openStream();
                    } catch (Exception e) {
                        try {
                            url = new URL(HTTP + imageUrl);
                            is = url.openStream();
                        } catch (Exception e1) {
                            url = new URL(urlTextField.getText() + imageUrl);
                            is = url.openStream();
                        }
                    }

                    image = ImageIO.read(is);
                    cache.put(imageUrl, image);
                }
            } catch (Exception e) {
                invalidImageUrls.add(imageUrl);
            }
        }

        
        if (image != null) {
            fileNameLabel.setText(fileName);
            imageScrollPane.setViewportView(new JLabel(new ImageIcon(image)));
        }
        else {
            fileNameLabel.setText(fileName + " (Error loading Image)");
            imageScrollPane.setViewportView(new JLabel(new ImageIcon()));
        }
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new ImageScraper().setVisible(true);
            }
        });
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel fileNameLabel;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JScrollPane imageScrollPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton leftButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextField regExpTextField;
    private javax.swing.JButton rightButton;
    private javax.swing.JButton submitButton;
    private javax.swing.JTextField urlTextField;
    // End of variables declaration//GEN-END:variables
    
    private ArrayList<String> imageUrls;
    private int currentIndex;
    private Map<String, BufferedImage> cache = new HashMap<String, BufferedImage>();
    private Set<String> invalidImageUrls = new HashSet<String>();
    private static final String HTTP = "http://";
    private static final String WWW = "www.";

}
